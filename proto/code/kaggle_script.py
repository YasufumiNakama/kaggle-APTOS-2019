import base64
import os
import shutil
from pathlib import Path
from typing import Dict


# this is base64 encoded source code
file_data: Dict = {  # RandomCrop(288)
                    'aptos/transforms.py': 'aW1wb3J0IHJhbmRvbQppbXBvcnQgbWF0aAppbXBvcnQgbnVtYmVycwoKZnJvbSBQSUwgaW1wb3J0IEltYWdlCmltcG9ydCB0b3JjaHZpc2lvbi50cmFuc2Zvcm1zLmZ1bmN0aW9uYWwgYXMgRgpmcm9tIHRvcmNodmlzaW9uLnRyYW5zZm9ybXMgaW1wb3J0ICgKICAgIFRvVGVuc29yLCBOb3JtYWxpemUsIENvbXBvc2UsIFJlc2l6ZSwgQ2VudGVyQ3JvcCwgUmFuZG9tQ3JvcCwKICAgIFJhbmRvbUhvcml6b250YWxGbGlwLCBSYW5kb21SZXNpemVkQ3JvcCwgUmFuZG9tUm90YXRpb24pCgoKY2xhc3MgUmFuZG9tU2l6ZWRDcm9wOgogICAgIiIiUmFuZG9tIGNyb3AgdGhlIGdpdmVuIFBJTC5JbWFnZSB0byBhIHJhbmRvbSBzaXplCiAgICBvZiB0aGUgb3JpZ2luYWwgc2l6ZSBhbmQgYW5kIGEgcmFuZG9tIGFzcGVjdCByYXRpbwogICAgb2YgdGhlIG9yaWdpbmFsIGFzcGVjdCByYXRpby4KICAgIHNpemU6IHNpemUgb2YgdGhlIHNtYWxsZXIgZWRnZQogICAgaW50ZXJwb2xhdGlvbjogRGVmYXVsdDogUElMLkltYWdlLkJJTElORUFSCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc2l6ZSwgaW50ZXJwb2xhdGlvbj1JbWFnZS5CSUxJTkVBUiwKICAgICAgICAgICAgICAgICBtaW5fYXNwZWN0PTQvNSwgbWF4X2FzcGVjdD01LzQsCiAgICAgICAgICAgICAgICAgbWluX2FyZWE9MC4yNSwgbWF4X2FyZWE9MSk6CiAgICAgICAgc2VsZi5zaXplID0gc2l6ZQogICAgICAgIHNlbGYuaW50ZXJwb2xhdGlvbiA9IGludGVycG9sYXRpb24KICAgICAgICBzZWxmLm1pbl9hc3BlY3QgPSBtaW5fYXNwZWN0CiAgICAgICAgc2VsZi5tYXhfYXNwZWN0ID0gbWF4X2FzcGVjdAogICAgICAgIHNlbGYubWluX2FyZWEgPSBtaW5fYXJlYQogICAgICAgIHNlbGYubWF4X2FyZWEgPSBtYXhfYXJlYQoKICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBpbWcpOgogICAgICAgIGZvciBhdHRlbXB0IGluIHJhbmdlKDEwKToKICAgICAgICAgICAgYXJlYSA9IGltZy5zaXplWzBdICogaW1nLnNpemVbMV0KICAgICAgICAgICAgdGFyZ2V0X2FyZWEgPSByYW5kb20udW5pZm9ybShzZWxmLm1pbl9hcmVhLCBzZWxmLm1heF9hcmVhKSAqIGFyZWEKICAgICAgICAgICAgYXNwZWN0X3JhdGlvID0gcmFuZG9tLnVuaWZvcm0oc2VsZi5taW5fYXNwZWN0LCBzZWxmLm1heF9hc3BlY3QpCgogICAgICAgICAgICB3ID0gaW50KHJvdW5kKG1hdGguc3FydCh0YXJnZXRfYXJlYSAqIGFzcGVjdF9yYXRpbykpKQogICAgICAgICAgICBoID0gaW50KHJvdW5kKG1hdGguc3FydCh0YXJnZXRfYXJlYSAvIGFzcGVjdF9yYXRpbykpKQoKICAgICAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC41OgogICAgICAgICAgICAgICAgdywgaCA9IGgsIHcKCiAgICAgICAgICAgIGlmIHcgPD0gaW1nLnNpemVbMF0gYW5kIGggPD0gaW1nLnNpemVbMV06CiAgICAgICAgICAgICAgICB4MSA9IHJhbmRvbS5yYW5kaW50KDAsIGltZy5zaXplWzBdIC0gdykKICAgICAgICAgICAgICAgIHkxID0gcmFuZG9tLnJhbmRpbnQoMCwgaW1nLnNpemVbMV0gLSBoKQoKICAgICAgICAgICAgICAgIGltZyA9IGltZy5jcm9wKCh4MSwgeTEsIHgxICsgdywgeTEgKyBoKSkKICAgICAgICAgICAgICAgIGFzc2VydChpbWcuc2l6ZSA9PSAodywgaCkpCgogICAgICAgICAgICAgICAgcmV0dXJuIGltZy5yZXNpemUoKHNlbGYuc2l6ZSwgc2VsZi5zaXplKSwgc2VsZi5pbnRlcnBvbGF0aW9uKQoKICAgICAgICAjIEZhbGxiYWNrCiAgICAgICAgc2NhbGUgPSBSZXNpemUoc2VsZi5zaXplLCBpbnRlcnBvbGF0aW9uPXNlbGYuaW50ZXJwb2xhdGlvbikKICAgICAgICBjcm9wID0gQ2VudGVyQ3JvcChzZWxmLnNpemUpCiAgICAgICAgcmV0dXJuIGNyb3Aoc2NhbGUoaW1nKSkKCgpjbGFzcyBSYW5kb21Sb3RhdGUob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBkZWdyZWVzLCByZXNhbXBsZT1GYWxzZSwgZXhwYW5kPUZhbHNlLCBjZW50ZXI9Tm9uZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZShkZWdyZWVzLCBudW1iZXJzLk51bWJlcik6CiAgICAgICAgICAgIGlmIGRlZ3JlZXMgPCAwOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSWYgZGVncmVlcyBpcyBhIHNpbmdsZSBudW1iZXIsIGl0IG11c3QgYmUgcG9zaXRpdmUuIikKICAgICAgICAgICAgc2VsZi5kZWdyZWVzID0gKC1kZWdyZWVzLCBkZWdyZWVzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGxlbihkZWdyZWVzKSAhPSAyOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSWYgZGVncmVlcyBpcyBhIHNlcXVlbmNlLCBpdCBtdXN0IGJlIG9mIGxlbiAyLiIpCiAgICAgICAgICAgIHNlbGYuZGVncmVlcyA9IGRlZ3JlZXMKCiAgICAgICAgc2VsZi5yZXNhbXBsZSA9IHJlc2FtcGxlCiAgICAgICAgc2VsZi5leHBhbmQgPSBleHBhbmQKICAgICAgICBzZWxmLmNlbnRlciA9IGNlbnRlcgoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBnZXRfcGFyYW1zKGRlZ3JlZXMpOgogICAgICAgIGFuZ2xlID0gcmFuZG9tLnVuaWZvcm0oZGVncmVlc1swXSwgZGVncmVlc1sxXSkKCiAgICAgICAgcmV0dXJuIGFuZ2xlCgogICAgZGVmIF9fY2FsbF9fKHNlbGYsIGltZyk6CiAgICAgICAgaWYgcmFuZG9tLnJhbmRvbSgpIDwgMC41OgogICAgICAgICAgICBhbmdsZSA9IHNlbGYuZ2V0X3BhcmFtcyhzZWxmLmRlZ3JlZXMpCiAgICAgICAgICAgIHJldHVybiBGLnJvdGF0ZShpbWcsIGFuZ2xlLCBzZWxmLnJlc2FtcGxlLCBzZWxmLmV4cGFuZCwgc2VsZi5jZW50ZXIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYW5nbGUgPSByYW5kb20udW5pZm9ybSgwLCAwKQogICAgICAgICAgICByZXR1cm4gRi5yb3RhdGUoaW1nLCBhbmdsZSwgc2VsZi5yZXNhbXBsZSwgc2VsZi5leHBhbmQsIHNlbGYuY2VudGVyKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBmb3JtYXRfc3RyaW5nID0gc2VsZi5fX2NsYXNzX18uX19uYW1lX18gKyAnKGRlZ3JlZXM9ezB9Jy5mb3JtYXQoc2VsZi5kZWdyZWVzKQogICAgICAgIGZvcm1hdF9zdHJpbmcgKz0gJywgcmVzYW1wbGU9ezB9Jy5mb3JtYXQoc2VsZi5yZXNhbXBsZSkKICAgICAgICBmb3JtYXRfc3RyaW5nICs9ICcsIGV4cGFuZD17MH0nLmZvcm1hdChzZWxmLmV4cGFuZCkKICAgICAgICBpZiBzZWxmLmNlbnRlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgZm9ybWF0X3N0cmluZyArPSAnLCBjZW50ZXI9ezB9Jy5mb3JtYXQoc2VsZi5jZW50ZXIpCiAgICAgICAgZm9ybWF0X3N0cmluZyArPSAnKScKICAgICAgICByZXR1cm4gZm9ybWF0X3N0cmluZwoKCnRyYWluX3RyYW5zZm9ybSA9IENvbXBvc2UoWwogICAgIyBSYW5kb21Sb3RhdGUoKDkwLCA5MCksIGV4cGFuZD1UcnVlKSwKICAgIFJhbmRvbUNyb3AoMjg4KSwKICAgIFJhbmRvbUhvcml6b250YWxGbGlwKCksCl0pCgoKdGVzdF90cmFuc2Zvcm0gPSBDb21wb3NlKFsKICAgICMgUmFuZG9tUm90YXRlKCg5MCwgOTApLCBleHBhbmQ9VHJ1ZSksCiAgICBSYW5kb21Dcm9wKDI4OCksCiAgICBSYW5kb21Ib3Jpem9udGFsRmxpcCgpLApdKQoKCiIiIgp0cmFpbl90cmFuc2Zvcm0gPSBDb21wb3NlKFsKICAgICMgUmFuZG9tUm90YXRlKCg5MCwgOTApLCBleHBhbmQ9VHJ1ZSksCiAgICBSYW5kb21SZXNpemVkQ3JvcCgzMjAsIHNjYWxlPSgwLjYsIDEuMCksIHJhdGlvPSg5LzE2LCAxNi85KSksCiAgICBSYW5kb21Ib3Jpem9udGFsRmxpcCgpLApdKQp0ZXN0X3RyYW5zZm9ybSA9IENvbXBvc2UoWwogICAgIyBSYW5kb21Sb3RhdGUoKDkwLCA5MCksIGV4cGFuZD1UcnVlKSwKICAgIFJhbmRvbVJlc2l6ZWRDcm9wKDMyMCwgc2NhbGU9KDAuNiwgMS4wKSwgcmF0aW89KDkvMTYsIDE2LzkpKSwKICAgIFJhbmRvbUhvcml6b250YWxGbGlwKCksCl0pCiIiIgoKCnRlbnNvcl90cmFuc2Zvcm0gPSBDb21wb3NlKFsKICAgIFRvVGVuc29yKCksCiAgICBOb3JtYWxpemUobWVhbj1bMC40ODUsIDAuNDU2LCAwLjQwNl0sIHN0ZD1bMC4yMjksIDAuMjI0LCAwLjIyNV0pLApdKQo=',
                    'aptos/models.py': '',
                    'aptos/make_folds.py': 'aW1wb3J0IGFyZ3BhcnNlCmZyb20gc2tsZWFybi5tb2RlbF9zZWxlY3Rpb24gaW1wb3J0IFN0cmF0aWZpZWRLRm9sZAoKaW1wb3J0IHBhbmRhcyBhcyBwZAoKZnJvbSAuZGF0YXNldCBpbXBvcnQgREFUQV9ST09UCgoKZGVmIG1ha2VfZm9sZHMobl9mb2xkczogaW50LCBzZWVkOiBpbnQpIC0+IHBkLkRhdGFGcmFtZToKICAgIGRmID0gcGQucmVhZF9jc3YoREFUQV9ST09UIC8gJ3RyYWluLmNzdicpCiAgICBkZlsnZm9sZCddID0gMAogICAgc2tmID0gU3RyYXRpZmllZEtGb2xkKG5fc3BsaXRzPW5fZm9sZHMsIHJhbmRvbV9zdGF0ZT1zZWVkKQogICAgZm9yIGksICh0cmFpbl9pbmRleCwgdmFsX2luZGV4KSBpbiBlbnVtZXJhdGUoc2tmLnNwbGl0KGRmLCBkZlsnZGlhZ25vc2lzJ10pKToKICAgICAgICBkZi5sb2NbdmFsX2luZGV4LCAnZm9sZCddID0gaW50KGkpCiAgICByZXR1cm4gZGYKCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1uLWZvbGRzJywgdHlwZT1pbnQsIGRlZmF1bHQ9NSkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tc2VlZCcsIHR5cGU9aW50LCBkZWZhdWx0PTQyKQogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKICAgIGRmID0gbWFrZV9mb2xkcyhuX2ZvbGRzPWFyZ3Mubl9mb2xkcywgc2VlZD1hcmdzLnNlZWQpCiAgICBkZi50b19jc3YoJ2ZvbGRzLmNzdicsIGluZGV4PU5vbmUpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQo=',
                    'aptos/dataset.py': 'ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBDYWxsYWJsZSwgTGlzdAoKaW1wb3J0IGN2MgppbXBvcnQgcGFuZGFzIGFzIHBkCmZyb20gUElMIGltcG9ydCBJbWFnZQppbXBvcnQgdG9yY2gKZnJvbSB0b3JjaC51dGlscy5kYXRhIGltcG9ydCBEYXRhc2V0Cgpmcm9tIC50cmFuc2Zvcm1zIGltcG9ydCB0ZW5zb3JfdHJhbnNmb3JtCmZyb20gLnV0aWxzIGltcG9ydCBPTl9LQUdHTEUKCgpEQVRBX1JPT1QgPSBQYXRoKCcuLi9pbnB1dC9hcHRvczIwMTktYmxpbmRuZXNzLWRldGVjdGlvbicgaWYgT05fS0FHR0xFIGVsc2UgJy4vZGF0YScpCgoKY2xhc3MgVHJhaW5EYXRhc2V0KERhdGFzZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHJvb3Q6IFBhdGgsIGRmOiBwZC5EYXRhRnJhbWUsCiAgICAgICAgICAgICAgICAgaW1hZ2VfdHJhbnNmb3JtOiBDYWxsYWJsZSwgZGVidWc6IGJvb2wgPSBUcnVlKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLl9yb290ID0gcm9vdAogICAgICAgIHNlbGYuX2RmID0gZGYKICAgICAgICBzZWxmLl9pbWFnZV90cmFuc2Zvcm0gPSBpbWFnZV90cmFuc2Zvcm0KICAgICAgICBzZWxmLl9kZWJ1ZyA9IGRlYnVnCgogICAgZGVmIF9fbGVuX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLl9kZikKCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaWR4OiBpbnQpOgogICAgICAgIGl0ZW0gPSBzZWxmLl9kZi5pbG9jW2lkeF0KICAgICAgICBpbWFnZSA9IGxvYWRfdHJhbnNmb3JtX2ltYWdlKAogICAgICAgICAgICBpdGVtLCBzZWxmLl9yb290LCBzZWxmLl9pbWFnZV90cmFuc2Zvcm0sIGRlYnVnPXNlbGYuX2RlYnVnKQogICAgICAgIHRhcmdldCA9IHRvcmNoLnRlbnNvcihzZWxmLl9kZi5sb2NbaWR4LCAnZGlhZ25vc2lzJ10pCiAgICAgICAgcmV0dXJuIGltYWdlLCB0YXJnZXQKCgpjbGFzcyBUVEFEYXRhc2V0OgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHJvb3Q6IFBhdGgsIGRmOiBwZC5EYXRhRnJhbWUsCiAgICAgICAgICAgICAgICAgaW1hZ2VfdHJhbnNmb3JtOiBDYWxsYWJsZSwgdHRhOiBpbnQpOgogICAgICAgIHNlbGYuX3Jvb3QgPSByb290CiAgICAgICAgc2VsZi5fZGYgPSBkZgogICAgICAgIHNlbGYuX2ltYWdlX3RyYW5zZm9ybSA9IGltYWdlX3RyYW5zZm9ybQogICAgICAgIHNlbGYuX3R0YSA9IHR0YQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5fZGYpICogc2VsZi5fdHRhCgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGlkeCk6CiAgICAgICAgaXRlbSA9IHNlbGYuX2RmLmlsb2NbaWR4ICUgbGVuKHNlbGYuX2RmKV0KICAgICAgICBpbWFnZSA9IGxvYWRfdHJhbnNmb3JtX2ltYWdlKGl0ZW0sIHNlbGYuX3Jvb3QsIHNlbGYuX2ltYWdlX3RyYW5zZm9ybSkKICAgICAgICByZXR1cm4gaW1hZ2UsIGl0ZW0uaWQKCgpkZWYgbG9hZF90cmFuc2Zvcm1faW1hZ2UoCiAgICAgICAgaXRlbSwgcm9vdDogUGF0aCwgaW1hZ2VfdHJhbnNmb3JtOiBDYWxsYWJsZSwgZGVidWc6IGJvb2wgPSBGYWxzZSk6CiAgICBpbWFnZSA9IGxvYWRfaW1hZ2UoaXRlbSwgcm9vdCkKICAgIGltYWdlID0gaW1hZ2VfdHJhbnNmb3JtKGltYWdlKQogICAgaWYgZGVidWc6CiAgICAgICAgaW1hZ2Uuc2F2ZSgnX2RlYnVnLnBuZycpCiAgICByZXR1cm4gdGVuc29yX3RyYW5zZm9ybShpbWFnZSkKCgpkZWYgbG9hZF9pbWFnZShpdGVtLCByb290OiBQYXRoKSAtPiBJbWFnZS5JbWFnZToKICAgIGltYWdlID0gY3YyLmltcmVhZChzdHIocm9vdCAvIGYne2l0ZW0uaWR9LnBuZycpKQogICAgaW1hZ2UgPSBjdjIuY3Z0Q29sb3IoaW1hZ2UsIGN2Mi5DT0xPUl9CR1IyUkdCKQogICAgcmV0dXJuIEltYWdlLmZyb21hcnJheShpbWFnZSkKCgpkZWYgZ2V0X2lkcyhyb290OiBQYXRoKSAtPiBMaXN0W3N0cl06CiAgICByZXR1cm4gc29ydGVkKHtwLm5hbWUuc3BsaXQoJ18nKVswXSBmb3IgcCBpbiByb290Lmdsb2IoJyoucG5nJyl9KQo=',
                    'aptos/utils.py': 'ZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGpzb24KaW1wb3J0IGdsb2IKaW1wb3J0IG9zCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIG11bHRpcHJvY2Vzc2luZy5wb29sIGltcG9ydCBUaHJlYWRQb29sCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0CgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZApmcm9tIHNjaXB5LnN0YXRzLm1zdGF0cyBpbXBvcnQgZ21lYW4KaW1wb3J0IHRvcmNoCmZyb20gdG9yY2ggaW1wb3J0IG5uCmZyb20gdG9yY2gudXRpbHMuZGF0YSBpbXBvcnQgRGF0YUxvYWRlcgoKCk9OX0tBR0dMRTogYm9vbCA9ICdLQUdHTEVfV09SS0lOR19ESVInIGluIG9zLmVudmlyb24KCgpkZWYgZ21lYW5fZGYoZGY6IHBkLkRhdGFGcmFtZSkgLT4gcGQuRGF0YUZyYW1lOgogICAgcmV0dXJuIGRmLmdyb3VwYnkobGV2ZWw9MCkuYWdnKGxhbWJkYSB4OiBnbWVhbihsaXN0KHgpKSkKCgpkZWYgbWVhbl9kZihkZjogcGQuRGF0YUZyYW1lKSAtPiBwZC5EYXRhRnJhbWU6CiAgICByZXR1cm4gZGYuZ3JvdXBieShsZXZlbD0wKS5tZWFuKCkKCgpkZWYgbG9hZF9tb2RlbChtb2RlbDogbm4uTW9kdWxlLCBwYXRoOiBQYXRoKSAtPiBEaWN0OgogICAgc3RhdGUgPSB0b3JjaC5sb2FkKHN0cihwYXRoKSkKICAgIG1vZGVsLmxvYWRfc3RhdGVfZGljdChzdGF0ZVsnbW9kZWwnXSkKICAgIHByaW50KCdMb2FkZWQgbW9kZWwgZnJvbSBlcG9jaCB7ZXBvY2h9LCBzdGVwIHtzdGVwOix9Jy5mb3JtYXQoKipzdGF0ZSkpCiAgICByZXR1cm4gc3RhdGUKCgpjbGFzcyBUaHJlYWRpbmdEYXRhTG9hZGVyKERhdGFMb2FkZXIpOgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHNhbXBsZV9pdGVyID0gaXRlcihzZWxmLmJhdGNoX3NhbXBsZXIpCiAgICAgICAgaWYgc2VsZi5udW1fd29ya2VycyA9PSAwOgogICAgICAgICAgICBmb3IgaW5kaWNlcyBpbiBzYW1wbGVfaXRlcjoKICAgICAgICAgICAgICAgIHlpZWxkIHNlbGYuY29sbGF0ZV9mbihbc2VsZi5fZ2V0X2l0ZW0oaSkgZm9yIGkgaW4gaW5kaWNlc10pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJlZmV0Y2ggPSAxCiAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbChwcm9jZXNzZXM9c2VsZi5udW1fd29ya2VycykgYXMgcG9vbDoKICAgICAgICAgICAgICAgIGZ1dHVyZXMgPSBbXQogICAgICAgICAgICAgICAgZm9yIGluZGljZXMgaW4gc2FtcGxlX2l0ZXI6CiAgICAgICAgICAgICAgICAgICAgZnV0dXJlcy5hcHBlbmQoW3Bvb2wuYXBwbHlfYXN5bmMoc2VsZi5fZ2V0X2l0ZW0sIGFyZ3M9KGksKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gaW5kaWNlc10pCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGZ1dHVyZXMpID4gcHJlZmV0Y2g6CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHNlbGYuY29sbGF0ZV9mbihbZi5nZXQoKSBmb3IgZiBpbiBmdXR1cmVzLnBvcCgwKV0pCiAgICAgICAgICAgICAgICAgICAgIyBpdGVtcyA9IHBvb2wubWFwKGxhbWJkYSBpOiBzZWxmLmRhdGFzZXRbaV0sIGluZGljZXMpCiAgICAgICAgICAgICAgICAgICAgIyB5aWVsZCBzZWxmLmNvbGxhdGVfZm4oaXRlbXMpCiAgICAgICAgICAgICAgICBmb3IgYmF0Y2hfZnV0dXJlcyBpbiBmdXR1cmVzOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIHNlbGYuY29sbGF0ZV9mbihbZi5nZXQoKSBmb3IgZiBpbiBiYXRjaF9mdXR1cmVzXSkKCiAgICBkZWYgX2dldF9pdGVtKHNlbGYsIGkpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGFzZXRbaV0KCgpkZWYgd3JpdGVfZXZlbnQobG9nLCBzdGVwOiBpbnQsICoqZGF0YSk6CiAgICBkYXRhWydzdGVwJ10gPSBzdGVwCiAgICBkYXRhWydkdCddID0gZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCkKICAgIGxvZy53cml0ZShqc29uLmR1bXBzKGRhdGEsIHNvcnRfa2V5cz1UcnVlKSkKICAgIGxvZy53cml0ZSgnXG4nKQogICAgbG9nLmZsdXNoKCkKCgpkZWYgcGxvdCgqYXJncywgeW1pbj1Ob25lLCB5bWF4PU5vbmUsIHhtaW49Tm9uZSwgeG1heD1Ob25lLCBwYXJhbXM9RmFsc2UsCiAgICAgICAgIG1heF9wb2ludHM9MjAwLCBsZWdlbmQ9VHJ1ZSwgdGl0bGU9Tm9uZSwKICAgICAgICAgcHJpbnRfa2V5cz1GYWxzZSwgcHJpbnRfcGF0aHM9RmFsc2UsIHBsdD1Ob25lLCBuZXdmaWd1cmU9VHJ1ZSwKICAgICAgICAgeF9zY2FsZT0xKToKICAgICIiIgogICAgVXNlIGluIHRoZSBub3RlYm9vayBsaWtlIHRoaXM6OgogICAgICAgICVtYXRwbG90bGliIGlubGluZQogICAgICAgIGZyb20gaW1ldC51dGlscyBpbXBvcnQgcGxvdAogICAgICAgIHBsb3QoJy4vcnVucy9vYzInLCAnLi9ydW5zL29jMScsICdsb3NzJywgJ3ZhbGlkX2xvc3MnKQogICAgIiIiCiAgICBpbXBvcnQganNvbl9saW5lcyAgIyBubyBhdmFpbGFibGUgb24gS2FnZ2xlCgogICAgaWYgcGx0IGlzIE5vbmU6CiAgICAgICAgZnJvbSBtYXRwbG90bGliIGltcG9ydCBweXBsb3QgYXMgcGx0CiAgICBwYXRocywga2V5cyA9IFtdLCBbXQogICAgZm9yIHggaW4gYXJnczoKICAgICAgICBpZiB4LnN0YXJ0c3dpdGgoJy4nKSBvciAnLycgaW4geDoKICAgICAgICAgICAgaWYgJyonIGluIHg6CiAgICAgICAgICAgICAgICBwYXRocy5leHRlbmQoZ2xvYi5nbG9iKHgpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcGF0aHMuYXBwZW5kKHgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAga2V5cy5hcHBlbmQoeCkKICAgIGlmIHByaW50X3BhdGhzOgogICAgICAgIHByaW50KCdGb3VuZCBwYXRoczoge30nLmZvcm1hdCgnICcuam9pbihzb3J0ZWQocGF0aHMpKSkpCiAgICBpZiBuZXdmaWd1cmU6CiAgICAgICAgcGx0LmZpZ3VyZShmaWdzaXplPSgxMiwgOCkpCiAgICBrZXlzID0ga2V5cyBvciBbJ2xvc3MnLCAndmFsaWRfbG9zcyddCgogICAgeWxpbV9rdyA9IHt9CiAgICBpZiB5bWluIGlzIG5vdCBOb25lOgogICAgICAgIHlsaW1fa3dbJ2JvdHRvbSddID0geW1pbgogICAgaWYgeW1heCBpcyBub3QgTm9uZToKICAgICAgICB5bGltX2t3Wyd0b3AnXSA9IHltYXgKICAgIGlmIHlsaW1fa3c6CiAgICAgICAgcGx0LnlsaW0oKip5bGltX2t3KQoKICAgIHhsaW1fa3cgPSB7fQogICAgaWYgeG1pbiBpcyBub3QgTm9uZToKICAgICAgICB4bGltX2t3WydsZWZ0J10gPSB4bWluCiAgICBpZiB4bWF4IGlzIG5vdCBOb25lOgogICAgICAgIHhsaW1fa3dbJ3JpZ2h0J10gPSB4bWF4CiAgICBpZiB4bGltX2t3OgogICAgICAgIHBsdC54bGltKCoqeGxpbV9rdykKICAgIGFsbF9rZXlzID0gc2V0KCkKICAgIGZvciBwYXRoIGluIHNvcnRlZChwYXRocyk6CiAgICAgICAgcGF0aCA9IFBhdGgocGF0aCkKICAgICAgICB3aXRoIGpzb25fbGluZXMub3BlbihwYXRoIC8gJ3RyYWluLmxvZycsIGJyb2tlbj1UcnVlKSBhcyBmOgogICAgICAgICAgICBldmVudHMgPSBsaXN0KGYpCiAgICAgICAgYWxsX2tleXMudXBkYXRlKGsgZm9yIGUgaW4gZXZlbnRzIGZvciBrIGluIGUpCiAgICAgICAgZm9yIGtleSBpbiBzb3J0ZWQoa2V5cyk6CiAgICAgICAgICAgIHhzLCB5cywgeXNfZXJyID0gW10sIFtdLCBbXQogICAgICAgICAgICBmb3IgZSBpbiBldmVudHM6CiAgICAgICAgICAgICAgICBpZiBrZXkgaW4gZToKICAgICAgICAgICAgICAgICAgICB4cy5hcHBlbmQoZVsnc3RlcCddICogeF9zY2FsZSkKICAgICAgICAgICAgICAgICAgICB5cy5hcHBlbmQoZVtrZXldKQogICAgICAgICAgICAgICAgICAgIHN0ZF9rZXkgPSBrZXkgKyAnX3N0ZCcKICAgICAgICAgICAgICAgICAgICBpZiBzdGRfa2V5IGluIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHlzX2Vyci5hcHBlbmQoZVtzdGRfa2V5XSkKICAgICAgICAgICAgaWYgeHM6CiAgICAgICAgICAgICAgICBpZiBucC5pc25hbih5cykuYW55KCk6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1dhcm5pbmc6IE5hTiB7fSBmb3Ige30nLmZvcm1hdChrZXksIHBhdGgpKQogICAgICAgICAgICAgICAgaWYgbGVuKHhzKSA+IDIgKiBtYXhfcG9pbnRzOgogICAgICAgICAgICAgICAgICAgIGluZGljZXMgPSAobnAuYXJhbmdlKDAsIGxlbih4cykgLSAxLCBsZW4oeHMpIC8gbWF4X3BvaW50cykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hc3R5cGUobnAuaW50MzIpKQogICAgICAgICAgICAgICAgICAgIHhzID0gbnAuYXJyYXkoeHMpW2luZGljZXNbMTpdXQogICAgICAgICAgICAgICAgICAgIHlzID0gX3Ntb290aCh5cywgaW5kaWNlcykKICAgICAgICAgICAgICAgICAgICBpZiB5c19lcnI6CiAgICAgICAgICAgICAgICAgICAgICAgIHlzX2VyciA9IF9zbW9vdGgoeXNfZXJyLCBpbmRpY2VzKQogICAgICAgICAgICAgICAgbGFiZWwgPSAne306IHt9Jy5mb3JtYXQocGF0aCwga2V5KQogICAgICAgICAgICAgICAgaWYgbGFiZWwuc3RhcnRzd2l0aCgnXycpOgogICAgICAgICAgICAgICAgICAgIGxhYmVsID0gJyAnICsgbGFiZWwKICAgICAgICAgICAgICAgIGlmIHlzX2VycjoKICAgICAgICAgICAgICAgICAgICB5c19lcnIgPSAxLjk2ICogbnAuYXJyYXkoeXNfZXJyKQogICAgICAgICAgICAgICAgICAgIHBsdC5lcnJvcmJhcih4cywgeXMsIHllcnI9eXNfZXJyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbXQ9Jy1vJywgY2Fwc2l6ZT01LCBjYXB0aGljaz0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1sYWJlbCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcGx0LnBsb3QoeHMsIHlzLCBsYWJlbD1sYWJlbCkKICAgICAgICAgICAgICAgIHBsdC5sZWdlbmQoKQogICAgaWYgbmV3ZmlndXJlOgogICAgICAgIHBsdC5ncmlkKCkKICAgIGlmIGxlZ2VuZDoKICAgICAgICBwbHQubGVnZW5kKCkKICAgIGlmIHRpdGxlOgogICAgICAgIHBsdC50aXRsZSh0aXRsZSkKICAgIGlmIHByaW50X2tleXM6CiAgICAgICAgcHJpbnQoJ0ZvdW5kIGtleXM6IHt9JwogICAgICAgICAgICAgIC5mb3JtYXQoJywgJy5qb2luKHNvcnRlZChhbGxfa2V5cyAtIHsnc3RlcCcsICdkdCd9KSkpKQoKCmRlZiBfc21vb3RoKHlzLCBpbmRpY2VzKToKICAgIHJldHVybiBbbnAubWVhbih5c1tpZHg6IGluZGljZXNbaSArIDFdXSkKICAgICAgICAgICAgZm9yIGksIGlkeCBpbiBlbnVtZXJhdGUoaW5kaWNlc1s6LTFdKV0K',
                    'aptos/main.py': '',
                    'aptos/__init__.py': 'aW1wb3J0IGN2MgpjdjIuc2V0TnVtVGhyZWFkcygwKQo=',
                    'setup.py': 'ZnJvbSBzZXR1cHRvb2xzIGltcG9ydCBzZXR1cAoKc2V0dXAoCiAgICBuYW1lPSdhcHRvcycsCiAgICBwYWNrYWdlcz1bJ2FwdG9zJ10sCikK'
                    }


for path, encoded in file_data.items():
    print(path)
    path = Path(path)
    path.parent.mkdir(exist_ok=True)
    path.write_bytes(base64.b64decode(encoded))


def run(command):
    os.system('export PYTHONPATH=${PYTHONPATH}:/kaggle/working && ' + command)


## resnet18
#os.makedirs('../input/resnet18')
#shutil.copy('../input/pytorch-pretrained-image-models/resnet18.pth', '../input/resnet18/')

## densenet121
#os.makedirs('../input/densenet121')
#shutil.copy('../input/pytorch-pretrained-image-models/densenet121.pth', '../input/densenet121/')

## densenet169 xxx
#os.makedirs('../input/densenet169')
#shutil.copy('../input/pytorch-pretrained-models/densenet169-b2777c0a.pth', '../input/densenet169/densenet169.pth')

## densenet201
#os.makedirs('../input/densenet201')
#shutil.copy('../input/pytorch-pretrained-image-models/densenet201.pth', '../input/densenet201/')

## densenet161 xxx
#os.makedirs('../input/densenet161')
#shutil.copy('../input/pytorch-densenet-pretrained/densenet161-8d451a50.pth', '../input/densenet161/densenet161.pth')

## inception v3
#os.makedirs('../input/inception_v3')
#shutil.copy('../input/pytorch-pretrained-models/inception_v3_google-1a9a5a14.pth', '../input/inception_v3/inception_v3.pth')

## se_resnet50
#os.makedirs('../input/se_resnet50')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnet50-ce0d4300.pth', '../input/se_resnet50/se_resnet50.pth')

## se_resnet101
#os.makedirs('../input/se_resnet101')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnet101-7e38fcc6.pth', '../input/se_resnet101/se_resnet101.pth')

## se_resnet152
#os.makedirs('../input/se_resnet152')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnet152-d17c99b7.pth', '../input/se_resnet152/se_resnet152.pth')

## se_resnext50_32x4d
#os.makedirs('../input/se_resnext50_32x4d')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnext50_32x4d-a260b3a4.pth', '../input/se_resnext50_32x4d/se_resnext50_32x4d.pth')

## se_resnext101_32x4d
#os.makedirs('../input/se_resnext101_32x4d')
#shutil.copy('../input/pytorch-pretrained-seresnet/se_resnext101_32x4d-3b2fe3d8.pth', '../input/se_resnext101_32x4d/se_resnext101_32x4d.pth')


print(os.listdir('/kaggle/working/'))
run('python setup.py develop --install-dir /kaggle/working')
run('python -m aptos.make_folds --n-folds 5 --seed 42')
run('python -m aptos.main train model_1 --n-epochs 1 --model resnet18 --batch-size 32')
#print(os.listdir('/kaggle/working/'))
#run('python -m imet.main predict_test model_1 --model se_resnext101_32x4d --batch-size 32')
#run('python -m imet.make_submission model_1/test.h5 submission.csv --threshold 0.10')
