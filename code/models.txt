import math
from collections import OrderedDict
from functools import partial
import re

import torch
from torch import nn
from torch.nn import functional as F
import torchvision.models as M

from fastai.layers import AdaptiveConcatPool2d

from .utils import ON_KAGGLE

"""
When you use AdaptiveConcatPool2d:
(Before)
    self.net.avg_pool = AvgPool()
    self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)
(After)
    self.net.avg_pool = AdaptiveConcatPool2d(1)
    self.net.last_linear = nn.Linear(self.net.last_linear.in_features * 2, num_classes)

When you try 2nd-train:
os.makedirs('../input/se_resnext50_32x4d')
# 1st-train lr=1e-4
# shutil.copy('../input/pytorch-pretrained-seresnet/se_resnext50_32x4d-a260b3a4.pth', '../input/se_resnext50_32x4d/se_resnext50_32x4d.pth')
# 2nd-train & adjust lr=1e-5
shutil.copy('../input/imet-weights/SEResNeXt50_32x4d_RandomRotate_1st_v42.pt', '../input/se_resnext50_32x4d/se_resnext50_32x4d.pth')
class SEResNeXt50_32x4d(nn.Module):
    def __init__(self, num_classes, pretrained=False, dropout=False, net_cls=None):
        super().__init__()
        self.net = SENet(SEResNeXtBottleneck, [3,4,6,3], groups=32, reduction=16,
                         dropout_p=None, inplanes=64, input_3x3=False,
                         downsample_kernel_size=1, downsample_padding=0,
                         num_classes=1000)
        weights_path = f'../input/se_resnext50_32x4d/se_resnext50_32x4d.pth'
        #self.net.load_state_dict(torch.load(weights_path))
        self.net.avg_pool = AvgPool()
        self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)
        self.load_state_dict(torch.load(weights_path)['model'])
    def fresh_params(self):
        return self.net.last_linear.parameters()
    def forward(self, x):
        return self.net(x)
"""


class SEModule(nn.Module):

    def __init__(self, channels, reduction):
        super(SEModule, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.fc1 = nn.Conv2d(channels, channels // reduction, kernel_size=1,
                             padding=0)
        self.relu = nn.ReLU(inplace=True)
        self.fc2 = nn.Conv2d(channels // reduction, channels, kernel_size=1,
                             padding=0)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        module_input = x
        x = self.avg_pool(x)
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        x = self.sigmoid(x)
        return module_input * x


class Bottleneck(nn.Module):
    """
    Base class for bottlenecks that implements `forward()` method.
    """

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        out = self.se_module(out) + residual
        out = self.relu(out)

        return out


class SEBottleneck(Bottleneck):
    """
    Bottleneck for SENet154.
    """
    expansion = 4

    def __init__(self, inplanes, planes, groups, reduction, stride=1,
                 downsample=None):
        super(SEBottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes * 2, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes * 2)
        self.conv2 = nn.Conv2d(planes * 2, planes * 4, kernel_size=3,
                               stride=stride, padding=1, groups=groups,
                               bias=False)
        self.bn2 = nn.BatchNorm2d(planes * 4)
        self.conv3 = nn.Conv2d(planes * 4, planes * 4, kernel_size=1,
                               bias=False)
        self.bn3 = nn.BatchNorm2d(planes * 4)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes * 4, reduction=reduction)
        self.downsample = downsample
        self.stride = stride


class SEResNetBottleneck(Bottleneck):
    """
    ResNet bottleneck with a Squeeze-and-Excitation module. It follows Caffe
    implementation and uses `stride=stride` in `conv1` and not in `conv2`
    (the latter is used in the torchvision implementation of ResNet).
    """
    expansion = 4

    def __init__(self, inplanes, planes, groups, reduction, stride=1,
                 downsample=None):
        super(SEResNetBottleneck, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=1, bias=False,
                               stride=stride)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, padding=1,
                               groups=groups, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(planes * 4)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes * 4, reduction=reduction)
        self.downsample = downsample
        self.stride = stride


class SEResNeXtBottleneck(Bottleneck):
    """
    ResNeXt bottleneck type C with a Squeeze-and-Excitation module.
    """
    expansion = 4

    def __init__(self, inplanes, planes, groups, reduction, stride=1,
                 downsample=None, base_width=4):
        super(SEResNeXtBottleneck, self).__init__()
        width = math.floor(planes * (base_width / 64)) * groups
        self.conv1 = nn.Conv2d(inplanes, width, kernel_size=1, bias=False,
                               stride=1)
        self.bn1 = nn.BatchNorm2d(width)
        self.conv2 = nn.Conv2d(width, width, kernel_size=3, stride=stride,
                               padding=1, groups=groups, bias=False)
        self.bn2 = nn.BatchNorm2d(width)
        self.conv3 = nn.Conv2d(width, planes * 4, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(planes * 4)
        self.relu = nn.ReLU(inplace=True)
        self.se_module = SEModule(planes * 4, reduction=reduction)
        self.downsample = downsample
        self.stride = stride


class SENet(nn.Module):

    def __init__(self, block, layers, groups, reduction, dropout_p=0.2,
                 inplanes=128, input_3x3=True, downsample_kernel_size=3,
                 downsample_padding=1, num_classes=1000):
        """
        Parameters
        ----------
        block (nn.Module): Bottleneck class.
            - For SENet154: SEBottleneck
            - For SE-ResNet models: SEResNetBottleneck
            - For SE-ResNeXt models:  SEResNeXtBottleneck
        layers (list of ints): Number of residual blocks for 4 layers of the
            network (layer1...layer4).
        groups (int): Number of groups for the 3x3 convolution in each
            bottleneck block.
            - For SENet154: 64
            - For SE-ResNet models: 1
            - For SE-ResNeXt models:  32
        reduction (int): Reduction ratio for Squeeze-and-Excitation modules.
            - For all models: 16
        dropout_p (float or None): Drop probability for the Dropout layer.
            If `None` the Dropout layer is not used.
            - For SENet154: 0.2
            - For SE-ResNet models: None
            - For SE-ResNeXt models: None
        inplanes (int):  Number of input channels for layer1.
            - For SENet154: 128
            - For SE-ResNet models: 64
            - For SE-ResNeXt models: 64
        input_3x3 (bool): If `True`, use three 3x3 convolutions instead of
            a single 7x7 convolution in layer0.
            - For SENet154: True
            - For SE-ResNet models: False
            - For SE-ResNeXt models: False
        downsample_kernel_size (int): Kernel size for downsampling convolutions
            in layer2, layer3 and layer4.
            - For SENet154: 3
            - For SE-ResNet models: 1
            - For SE-ResNeXt models: 1
        downsample_padding (int): Padding for downsampling convolutions in
            layer2, layer3 and layer4.
            - For SENet154: 1
            - For SE-ResNet models: 0
            - For SE-ResNeXt models: 0
        num_classes (int): Number of outputs in `last_linear` layer.
            - For all models: 1000
        """
        super(SENet, self).__init__()
        self.inplanes = inplanes
        if input_3x3:
            layer0_modules = [
                ('conv1', nn.Conv2d(3, 64, 3, stride=2, padding=1,
                                    bias=False)),
                ('bn1', nn.BatchNorm2d(64)),
                ('relu1', nn.ReLU(inplace=True)),
                ('conv2', nn.Conv2d(64, 64, 3, stride=1, padding=1,
                                    bias=False)),
                ('bn2', nn.BatchNorm2d(64)),
                ('relu2', nn.ReLU(inplace=True)),
                ('conv3', nn.Conv2d(64, inplanes, 3, stride=1, padding=1,
                                    bias=False)),
                ('bn3', nn.BatchNorm2d(inplanes)),
                ('relu3', nn.ReLU(inplace=True)),
            ]
        else:
            layer0_modules = [
                ('conv1', nn.Conv2d(3, inplanes, kernel_size=7, stride=2,
                                    padding=3, bias=False)),
                ('bn1', nn.BatchNorm2d(inplanes)),
                ('relu1', nn.ReLU(inplace=True)),
            ]
        # To preserve compatibility with Caffe weights `ceil_mode=True`
        # is used instead of `padding=1`.
        layer0_modules.append(('pool', nn.MaxPool2d(3, stride=2,
                                                    ceil_mode=True)))
        self.layer0 = nn.Sequential(OrderedDict(layer0_modules))
        self.layer1 = self._make_layer(
            block,
            planes=64,
            blocks=layers[0],
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=1,
            downsample_padding=0
        )
        self.layer2 = self._make_layer(
            block,
            planes=128,
            blocks=layers[1],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.layer3 = self._make_layer(
            block,
            planes=256,
            blocks=layers[2],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.layer4 = self._make_layer(
            block,
            planes=512,
            blocks=layers[3],
            stride=2,
            groups=groups,
            reduction=reduction,
            downsample_kernel_size=downsample_kernel_size,
            downsample_padding=downsample_padding
        )
        self.avg_pool = nn.AvgPool2d(7, stride=1)
        self.dropout = nn.Dropout(dropout_p) if dropout_p is not None else None
        self.last_linear = nn.Linear(512 * block.expansion, num_classes)

    def _make_layer(self, block, planes, blocks, groups, reduction, stride=1,
                    downsample_kernel_size=1, downsample_padding=0):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=downsample_kernel_size, stride=stride,
                          padding=downsample_padding, bias=False),
                nn.BatchNorm2d(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, groups, reduction, stride,
                            downsample))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups, reduction))

        return nn.Sequential(*layers)

    def features(self, x):
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        return x

    def logits(self, x):
        x = self.avg_pool(x)
        if self.dropout is not None:
            x = self.dropout(x)
        x = x.view(x.size(0), -1)
        x = self.last_linear(x)
        return x

    def forward(self, x):
        x = self.features(x)
        x = self.logits(x)
        return x


class SEResNet50(nn.Module):
    def __init__(self, num_classes, pretrained=False, dropout=False, net_cls=None):
        super().__init__()
        self.net = SENet(SEResNetBottleneck, [3, 4, 6, 3], groups=1, reduction=16,
                         dropout_p=None, inplanes=64, input_3x3=False,
                         downsample_kernel_size=1, downsample_padding=0,
                         num_classes=1000)
        weights_path = f'../input/se_resnet50/se_resnet50.pth'
        self.net.load_state_dict(torch.load(weights_path))
        self.net.avg_pool = AvgPool()
        self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)

    def fresh_params(self):
        return self.net.last_linear.parameters()

    def forward(self, x):
        return self.net(x)


class SEResNet101(nn.Module):
    def __init__(self, num_classes, pretrained=False, dropout=False, net_cls=None):
        super().__init__()
        self.net = SENet(SEResNetBottleneck, [3, 4, 23, 3], groups=1, reduction=16,
                         dropout_p=None, inplanes=64, input_3x3=False,
                         downsample_kernel_size=1, downsample_padding=0,
                         num_classes=1000)
        weights_path = f'../input/se_resnet101/se_resnet101.pth'
        self.net.load_state_dict(torch.load(weights_path))
        self.net.avg_pool = AvgPool()
        self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)

    def fresh_params(self):
        return self.net.last_linear.parameters()

    def forward(self, x):
        return self.net(x)


class SEResNet152(nn.Module):
    def __init__(self, num_classes, pretrained=False, dropout=False, net_cls=None):
        super().__init__()
        self.net = SENet(SEResNetBottleneck, [3, 8, 36, 3], groups=1, reduction=16,
                         dropout_p=None, inplanes=64, input_3x3=False,
                         downsample_kernel_size=1, downsample_padding=0,
                         num_classes=1000)
        weights_path = f'../input/se_resnet152/se_resnet152.pth'
        self.net.load_state_dict(torch.load(weights_path))
        self.net.avg_pool = AvgPool()
        self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)

    def fresh_params(self):
        return self.net.last_linear.parameters()

    def forward(self, x):
        return self.net(x)


class SEResNeXt50_32x4d(nn.Module):
    def __init__(self, num_classes, pretrained=False, dropout=False, net_cls=None):
        super().__init__()
        self.net = SENet(SEResNeXtBottleneck, [3, 4, 6, 3], groups=32, reduction=16,
                         dropout_p=None, inplanes=64, input_3x3=False,
                         downsample_kernel_size=1, downsample_padding=0,
                         num_classes=1000)
        weights_path = f'../input/se_resnext50_32x4d/se_resnext50_32x4d.pth'
        self.net.load_state_dict(torch.load(weights_path))
        self.net.avg_pool = AvgPool()
        self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)

    def fresh_params(self):
        return self.net.last_linear.parameters()

    def forward(self, x):
        return self.net(x)


class SEResNeXt101_32x4d(nn.Module):
    def __init__(self, num_classes, pretrained=False, dropout=False, net_cls=None):
        super().__init__()
        self.net = SENet(SEResNeXtBottleneck, [3, 4, 23, 3], groups=32, reduction=16,
                         dropout_p=None, inplanes=64, input_3x3=False,
                         downsample_kernel_size=1, downsample_padding=0,
                         num_classes=1000)
        weights_path = f'../input/se_resnext101_32x4d/se_resnext101_32x4d.pth'
        self.net.load_state_dict(torch.load(weights_path))
        self.net.avg_pool = AvgPool()
        self.net.last_linear = nn.Linear(self.net.last_linear.in_features, num_classes)

    def fresh_params(self):
        return self.net.last_linear.parameters()

    def forward(self, x):
        return self.net(x)


# Global Average Pooling same as nn.AdaptiveAvgPool2d(1) check https://www.xn--ebkc7kqd.com/entry/pytorch-pooling
class AvgPool(nn.Module):
    def forward(self, x):
        return F.avg_pool2d(x, x.shape[2:])


def create_net(net_cls, pretrained: bool):
    if ON_KAGGLE and pretrained:
        net = net_cls()
        model_name = net_cls.__name__
        weights_path = f'../input/{model_name}/{model_name}.pth'
        # https://github.com/pytorch/vision/blob/master/torchvision/models/densenet.py#L126-L141
        pattern = re.compile(
            r'^(.*denselayer\d+\.(?:norm|relu|conv))\.((?:[12])\.(?:weight|bias|running_mean|running_var))$')
        state_dict = torch.load(weights_path)
        for key in list(state_dict.keys()):
            res = pattern.match(key)
            if res:
                new_key = res.group(1) + res.group(2)
                state_dict[new_key] = state_dict[key]
                del state_dict[key]
        net.load_state_dict(state_dict)
        print("success load weights")
    else:
        net = net_cls(pretrained=pretrained)
    return net


class ResNet(nn.Module):
    def __init__(self, num_classes,
                 pretrained=False, net_cls=M.resnet101, dropout=False):
        super().__init__()
        self.net = create_net(net_cls, pretrained=pretrained)
        self.net.avgpool = AvgPool()
        if dropout:
            self.net.fc = nn.Sequential(
                nn.Dropout(),
                nn.Linear(self.net.fc.in_features, num_classes),
            )
        else:
            self.net.fc = nn.Linear(self.net.fc.in_features, num_classes)

    def fresh_params(self):
        return self.net.fc.parameters()

    def forward(self, x):
        return self.net(x)


class InceptionNet(nn.Module):
    def __init__(self, num_classes,
                 pretrained=False, net_cls=M.inception_v3):
        super().__init__()
        self.net = create_net(net_cls, pretrained=pretrained)
        self.net.fc = nn.Linear(self.net.fc.in_features, num_classes)
        self.net.AuxLogits.fc = nn.Linear(self.net.AuxLogits.fc.in_features, num_classes)

    def fresh_params(self):
        return self.net.fc.parameters()

    def forward(self, x):
        return self.net(x)


class DenseNet(nn.Module):
    def __init__(self, num_classes,
                 pretrained=False, net_cls=M.densenet121):
        super().__init__()
        self.net = create_net(net_cls, pretrained=pretrained)
        self.avg_pool = AvgPool()
        self.net.classifier = nn.Linear(
            self.net.classifier.in_features, num_classes)

    def fresh_params(self):
        return self.net.classifier.parameters()

    def forward(self, x):
        out = self.net.features(x)
        out = F.relu(out, inplace=True)
        out = self.avg_pool(out).view(out.size(0), -1)
        out = self.net.classifier(out)
        return out


resnet18 = partial(ResNet, net_cls=M.resnet18)
resnet34 = partial(ResNet, net_cls=M.resnet34)
resnet50 = partial(ResNet, net_cls=M.resnet50)
resnet101 = partial(ResNet, net_cls=M.resnet101)
resnet152 = partial(ResNet, net_cls=M.resnet152)

densenet121 = partial(DenseNet, net_cls=M.densenet121)
densenet169 = partial(DenseNet, net_cls=M.densenet169)
densenet201 = partial(DenseNet, net_cls=M.densenet201)
densenet161 = partial(DenseNet, net_cls=M.densenet161)

inception_v3 = partial(InceptionNet, net_cls=M.inception_v3)

se_resnet50 = partial(SEResNet50, net_cls=None)
se_resnet101 = partial(SEResNet101, net_cls=None)
se_resnet152 = partial(SEResNet152, net_cls=None)

se_resnext50_32x4d = partial(SEResNeXt50_32x4d, net_cls=None)
se_resnext101_32x4d = partial(SEResNeXt101_32x4d, net_cls=None)
